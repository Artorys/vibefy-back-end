"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.artistRoutes = void 0;
const express_1 = require("express");
const music_1 = require("../schema/music");
const artist_1 = require("../schema/artist");
const addAvatarFile_1 = require("../controllers/artist/addAvatarFile");
const getArtist_controller_1 = require("../controllers/artist/getArtist.controller");
const getArtistById_controller_1 = require("../controllers/adm/getArtistById.controller");
const getAllArtists_controller_1 = require("../controllers/adm/getAllArtists.controller");
const artistDelete_controller_1 = require("../controllers/artist/artistDelete.controller");
const artistUpdate_controller_1 = require("../controllers/artist/artistUpdate.controller");
const createArtist_controller_1 = require("../controllers/artist/createArtist.controller");
const getIdMusic_controller_1 = require("../controllers/artist/music/getIdMusic.controller");
const createMusic_controller_1 = require("../controllers/artist/music/createMusic.controller");
const getAllMusic_controller_1 = require("../controllers/artist/music/getAllMusic.controller");
const checkIdMiddleware_1 = require("../middleware/checkIdMiddleware");
const addMusicFilesAws_1 = require("../controllers/artist/music/addMusicFilesAws");
const verifyAuthAdminMiddleware_1 = require("../middleware/verifyAuthAdminMiddleware");
const verifyAuthTokenMiddleware_1 = require("../middleware/verifyAuthTokenMiddleware");
const verifyAuthArtistMiddleware_1 = require("../middleware/verifyAuthArtistMiddleware");
const schemaValidation_middleware_1 = require("../middleware/schemaValidation.middleware");
const deleteArtistById_controller_1 = require("../controllers/adm/deleteArtistById.controller");
const routes = (0, express_1.Router)();
const artistRoutes = () => {
    routes.post("", (0, schemaValidation_middleware_1.schemaValidationMiddleware)(artist_1.artistCreate), createArtist_controller_1.createArtistController);
    routes.get("/profile", verifyAuthTokenMiddleware_1.verifyAuthTokenMiddleware, verifyAuthArtistMiddleware_1.verifyAuthArtistMiddleware, getArtist_controller_1.getArtistController);
    routes.patch("/profile", verifyAuthTokenMiddleware_1.verifyAuthTokenMiddleware, verifyAuthArtistMiddleware_1.verifyAuthArtistMiddleware, (0, schemaValidation_middleware_1.schemaValidationMiddleware)(artist_1.artistUpdate), artistUpdate_controller_1.artistUpdateController);
    routes.delete("/profile", verifyAuthTokenMiddleware_1.verifyAuthTokenMiddleware, verifyAuthArtistMiddleware_1.verifyAuthArtistMiddleware, artistDelete_controller_1.deleteArtistController);
    routes.post("/music", verifyAuthTokenMiddleware_1.verifyAuthTokenMiddleware, verifyAuthArtistMiddleware_1.verifyAuthArtistMiddleware, (0, schemaValidation_middleware_1.schemaValidationMiddleware)(music_1.musicCreate), createMusic_controller_1.createMusicController);
    routes.get("/music", verifyAuthTokenMiddleware_1.verifyAuthTokenMiddleware, verifyAuthArtistMiddleware_1.verifyAuthArtistMiddleware, getAllMusic_controller_1.getAllMusicArtistController);
    routes.get("/music/:idMusic", verifyAuthTokenMiddleware_1.verifyAuthTokenMiddleware, verifyAuthArtistMiddleware_1.verifyAuthArtistMiddleware, getIdMusic_controller_1.getIdMusicController);
    routes.post("/music/:id/files", verifyAuthTokenMiddleware_1.verifyAuthTokenMiddleware, verifyAuthArtistMiddleware_1.verifyAuthArtistMiddleware, checkIdMiddleware_1.checkIdMiddleware, addMusicFilesAws_1.addMusicFilesAws);
    routes.post("/profile/avatar", verifyAuthTokenMiddleware_1.verifyAuthTokenMiddleware, verifyAuthArtistMiddleware_1.verifyAuthArtistMiddleware, addAvatarFile_1.addAvatarFile);
    //Only adm
    routes.get("", verifyAuthTokenMiddleware_1.verifyAuthTokenMiddleware, verifyAuthAdminMiddleware_1.verifyAuthAdminMiddleware, getAllArtists_controller_1.getAllArtistsController);
    routes.get("/:id", verifyAuthTokenMiddleware_1.verifyAuthTokenMiddleware, verifyAuthAdminMiddleware_1.verifyAuthAdminMiddleware, checkIdMiddleware_1.checkIdMiddleware, getArtistById_controller_1.getArtistByIdController);
    routes.delete("/:id", verifyAuthTokenMiddleware_1.verifyAuthTokenMiddleware, verifyAuthAdminMiddleware_1.verifyAuthAdminMiddleware, checkIdMiddleware_1.checkIdMiddleware, deleteArtistById_controller_1.deleteArtistByIdController);
    return routes;
};
exports.artistRoutes = artistRoutes;
