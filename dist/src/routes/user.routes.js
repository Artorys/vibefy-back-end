"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.userRoutes = void 0;
const express_1 = require("express");
const user_1 = require("../schema/user");
const getUsers_controller_1 = require("../controllers/user/getUsers.controller");
const createUser_controller_1 = require("../controllers/user/createUser.controller");
const deleteUser_controller_1 = require("../controllers/user/deleteUser.controller");
const userUpdate_controller_1 = require("../controllers/user/userUpdate.controller");
const getAllUsers_controller_1 = require("../controllers/adm/getAllUsers.controller");
const getUserById_controller_1 = require("../controllers/adm/getUserById.controller");
const deleteUserById_controller_1 = require("../controllers/adm/deleteUserById.controller");
const addPlaylistUser_controller_1 = require("../controllers/user/playlist/addPlaylistUser.controller");
const getIdPlaylistUser_controller_1 = require("../controllers/user/playlist/getIdPlaylistUser.controller");
const getAllPlaylistUse_controller_1 = require("../controllers/user/playlist/getAllPlaylistUse.controller");
const verifyAuthUserMiddleware_1 = require("../middleware/verifyAuthUserMiddleware");
const verifyAuthAdminMiddleware_1 = require("../middleware/verifyAuthAdminMiddleware");
const verifyAuthTokenMiddleware_1 = require("../middleware/verifyAuthTokenMiddleware");
const schemaValidation_middleware_1 = require("../middleware/schemaValidation.middleware");
const deleteIdPlaylistUser_controller_1 = require("../controllers/user/playlist/deleteIdPlaylistUser.controller");
const addAvatarFileAws_1 = require("../controllers/user/addAvatarFileAws");
const checkIdMiddleware_1 = require("../middleware/checkIdMiddleware");
const routes = (0, express_1.Router)();
const userRoutes = () => {
    routes.post("", (0, schemaValidation_middleware_1.schemaValidationMiddleware)(user_1.userCreate), createUser_controller_1.createUserController);
    routes.get("/profile", verifyAuthTokenMiddleware_1.verifyAuthTokenMiddleware, verifyAuthUserMiddleware_1.verifyAuthUserMiddleware, getUsers_controller_1.getUsersController);
    routes.patch("/profile", verifyAuthTokenMiddleware_1.verifyAuthTokenMiddleware, verifyAuthUserMiddleware_1.verifyAuthUserMiddleware, (0, schemaValidation_middleware_1.schemaValidationMiddleware)(user_1.userUpdate), userUpdate_controller_1.userUpdateController);
    routes.delete("/profile", verifyAuthTokenMiddleware_1.verifyAuthTokenMiddleware, verifyAuthUserMiddleware_1.verifyAuthUserMiddleware, deleteUser_controller_1.deleteUserController);
    routes.post("/profile/avatar", verifyAuthTokenMiddleware_1.verifyAuthTokenMiddleware, verifyAuthUserMiddleware_1.verifyAuthUserMiddleware, addAvatarFileAws_1.addAvatarFile);
    routes.post("/playlist/:id_playlist", verifyAuthTokenMiddleware_1.verifyAuthTokenMiddleware, verifyAuthUserMiddleware_1.verifyAuthUserMiddleware, addPlaylistUser_controller_1.addPlaylistUserController);
    routes.get("/playlist", verifyAuthTokenMiddleware_1.verifyAuthTokenMiddleware, verifyAuthUserMiddleware_1.verifyAuthUserMiddleware, getAllPlaylistUse_controller_1.getAllPlaylistUsersController);
    routes.get("/playlist/:id_playlist", verifyAuthTokenMiddleware_1.verifyAuthTokenMiddleware, verifyAuthUserMiddleware_1.verifyAuthUserMiddleware, getIdPlaylistUser_controller_1.getIdPlaylistUsersController);
    routes.delete("/playlist/:id_playlist", verifyAuthTokenMiddleware_1.verifyAuthTokenMiddleware, verifyAuthUserMiddleware_1.verifyAuthUserMiddleware, deleteIdPlaylistUser_controller_1.deleteIdPlaylistUsersController);
    //Only Adm
    routes.get("", verifyAuthTokenMiddleware_1.verifyAuthTokenMiddleware, verifyAuthAdminMiddleware_1.verifyAuthAdminMiddleware, getAllUsers_controller_1.getAllUsersController);
    routes.get("/:id", verifyAuthTokenMiddleware_1.verifyAuthTokenMiddleware, verifyAuthAdminMiddleware_1.verifyAuthAdminMiddleware, checkIdMiddleware_1.checkIdMiddleware, getUserById_controller_1.getUserByIdController);
    routes.delete("/:id", verifyAuthTokenMiddleware_1.verifyAuthTokenMiddleware, verifyAuthAdminMiddleware_1.verifyAuthAdminMiddleware, checkIdMiddleware_1.checkIdMiddleware, deleteUserById_controller_1.deleteUserByIdController);
    return routes;
};
exports.userRoutes = userRoutes;
